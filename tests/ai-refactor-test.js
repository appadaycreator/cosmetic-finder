/**
 * AIÈñãÁô∫Âêë„Åë„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞ÈÄÄË°å„ÉÜ„Çπ„Éà
 * „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞ÂâçÂæå„ÅßÂÖ®Ê©üËÉΩ„ÅåÊ≠£Â∏∏Âãï‰Ωú„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
 */

class AIRefactorRegressionTest {
    constructor() {
        this.testResults = [];
        this.errors = [];
        this.baseline = null;
        this.startTime = Date.now();
    }

    /**
     * ÂÖ®„ÉÜ„Çπ„Éà„Çπ„Ç§„Éº„Éà„ÇíÂÆüË°å
     */
    async runFullSuite() {
        console.log('üöÄ AI Refactor Regression Test Started');
        
        try {
            // „Éô„Éº„Çπ„É©„Ç§„É≥‰ΩúÊàê
            await this.createBaseline();
            
            // Âü∫Êú¨Ê©üËÉΩ„ÉÜ„Çπ„Éà
            await this.testBasicFunctionality();
            
            // UIÊ©üËÉΩ„ÉÜ„Çπ„Éà
            await this.testUIFunctionality();
            
            // „Éá„Éº„ÇøÊ©üËÉΩ„ÉÜ„Çπ„Éà
            await this.testDataFunctionality();
            
            // „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉÜ„Çπ„Éà
            await this.testPerformance();
            
            // ÁµêÊûú„É¨„Éù„Éº„ÉàÁîüÊàê
            this.generateReport();
            
        } catch (error) {
            console.error('‚ùå Test Suite Failed:', error);
            this.errors.push(error);
        }
    }

    /**
     * „Éô„Éº„Çπ„É©„Ç§„É≥ÔºàÊúüÂæÖ„Åï„Çå„ÇãÂãï‰ΩúÔºâ„Çí‰ΩúÊàê
     */
    async createBaseline() {
        console.log('üìã Creating Baseline...');
        
        this.baseline = {
            requiredElements: [
                '#homeContent',
                '#diagnosisContent', 
                '#ingredientContent',
                '#historyContent',
                '#contactContent',
                '#sidebar',
                'header',
                '.cta-button',
                '#ingredientInput',
                '#analyzeIngredients'
            ],
            requiredFunctions: [
                'showPage',
                'startDiagnosis',
                'analyzeIngredients',
                'changeLanguage',
                'changeFontSize',
                'toggleHighContrast'
            ],
            requiredData: [
                'diagnosisQuestions',
                'ingredientsDatabase',
                'allProducts'
            ],
            localStorage: [
                'cosmefinder_language',
                'cosmefinder_fontsize',
                'cosmefinder_highcontrast',
                'cosmefinder_history'
            ]
        };

        console.log('‚úÖ Baseline Created');
    }

    /**
     * Âü∫Êú¨Ê©üËÉΩ„Çí„ÉÜ„Çπ„Éà
     */
    async testBasicFunctionality() {
        console.log('üîç Testing Basic Functionality...');
        
        // DOMË¶ÅÁ¥†Â≠òÂú®Á¢∫Ë™ç
        for (const selector of this.baseline.requiredElements) {
            const element = document.querySelector(selector);
            this.addTestResult('DOM Element', selector, !!element);
        }

        // ÂøÖÈ†àÈñ¢Êï∞Â≠òÂú®Á¢∫Ë™ç
        for (const funcName of this.baseline.requiredFunctions) {
            const exists = typeof window[funcName] === 'function';
            this.addTestResult('Global Function', funcName, exists);
        }

        // „Éá„Éº„ÇøÂ≠òÂú®Á¢∫Ë™ç
        for (const dataName of this.baseline.requiredData) {
            const exists = window[dataName] !== undefined;
            this.addTestResult('Global Data', dataName, exists);
        }

        console.log('‚úÖ Basic Functionality Tests Complete');
    }

    /**
     * UIÊ©üËÉΩ„Çí„ÉÜ„Çπ„Éà
     */
    async testUIFunctionality() {
        console.log('üé® Testing UI Functionality...');
        
        // „Éö„Éº„Ç∏ÈÅ∑Áßª„ÉÜ„Çπ„Éà
        const pages = ['home', 'diagnosis', 'ingredient', 'history', 'contact'];
        for (const page of pages) {
            try {
                if (typeof window.showPage === 'function') {
                    window.showPage(page);
                    const activeElement = document.getElementById(page + 'Content');
                    const isVisible = activeElement && !activeElement.classList.contains('hidden');
                    this.addTestResult('Page Navigation', page, isVisible);
                } else {
                    this.addTestResult('Page Navigation', page, false);
                }
            } catch (error) {
                this.addTestResult('Page Navigation', page, false);
                this.errors.push(`Page navigation error for ${page}: ${error.message}`);
            }
        }

        // Ë®ÄË™ûÂàá„ÇäÊõø„Åà„ÉÜ„Çπ„Éà
        try {
            const langSelect = document.getElementById('languageSelect');
            if (langSelect && typeof window.changeLanguage === 'function') {
                const originalLang = langSelect.value;
                langSelect.value = 'en';
                window.changeLanguage();
                const langChanged = window.currentLanguage === 'en';
                langSelect.value = originalLang;
                window.changeLanguage();
                this.addTestResult('Language Switch', 'changeLanguage', langChanged);
            } else {
                this.addTestResult('Language Switch', 'changeLanguage', false);
            }
        } catch (error) {
            this.addTestResult('Language Switch', 'changeLanguage', false);
            this.errors.push(`Language switch error: ${error.message}`);
        }

        // „É¢„Éê„Ç§„É´„Çµ„Ç§„Éâ„Éê„Éº„ÉÜ„Çπ„Éà
        try {
            const sidebar = document.getElementById('mobileSidebar');
            const overlay = document.getElementById('sidebarOverlay');
            const hasRequiredElements = sidebar && overlay;
            this.addTestResult('Mobile Sidebar', 'elements exist', hasRequiredElements);
        } catch (error) {
            this.addTestResult('Mobile Sidebar', 'elements exist', false);
            this.errors.push(`Mobile sidebar test error: ${error.message}`);
        }

        console.log('‚úÖ UI Functionality Tests Complete');
    }

    /**
     * „Éá„Éº„ÇøÊ©üËÉΩ„Çí„ÉÜ„Çπ„Éà
     */
    async testDataFunctionality() {
        console.log('üíæ Testing Data Functionality...');
        
        // LocalStorageË™≠„ÅøÊõ∏„Åç„ÉÜ„Çπ„Éà
        try {
            const testKey = 'test_ai_refactor';
            const testData = { test: 'data', timestamp: Date.now() };
            
            localStorage.setItem(testKey, JSON.stringify(testData));
            const retrieved = JSON.parse(localStorage.getItem(testKey));
            const storageWorks = retrieved && retrieved.test === 'data';
            
            localStorage.removeItem(testKey);
            this.addTestResult('LocalStorage', 'read/write', storageWorks);
        } catch (error) {
            this.addTestResult('LocalStorage', 'read/write', false);
            this.errors.push(`LocalStorage test error: ${error.message}`);
        }

        // Ë®∫Êñ≠„Éá„Éº„ÇøÊßãÈÄ†„ÉÜ„Çπ„Éà
        try {
            if (window.diagnosisQuestions) {
                const isValidStructure = Array.isArray(window.diagnosisQuestions) &&
                                       window.diagnosisQuestions.length === 10 &&
                                       window.diagnosisQuestions[0].hasOwnProperty('id') &&
                                       window.diagnosisQuestions[0].hasOwnProperty('question') &&
                                       window.diagnosisQuestions[0].hasOwnProperty('options');
                this.addTestResult('Diagnosis Data', 'structure', isValidStructure);
            } else {
                this.addTestResult('Diagnosis Data', 'structure', false);
            }
        } catch (error) {
            this.addTestResult('Diagnosis Data', 'structure', false);
            this.errors.push(`Diagnosis data test error: ${error.message}`);
        }

        // Ë£ΩÂìÅ„Éá„Éº„ÇøÊßãÈÄ†„ÉÜ„Çπ„Éà
        try {
            if (window.allProducts) {
                const isValidStructure = Array.isArray(window.allProducts) &&
                                       window.allProducts.length > 0 &&
                                       window.allProducts[0].hasOwnProperty('id') &&
                                       window.allProducts[0].hasOwnProperty('name') &&
                                       window.allProducts[0].hasOwnProperty('brand');
                this.addTestResult('Product Data', 'structure', isValidStructure);
            } else {
                this.addTestResult('Product Data', 'structure', false);
            }
        } catch (error) {
            this.addTestResult('Product Data', 'structure', false);
            this.errors.push(`Product data test error: ${error.message}`);
        }

        console.log('‚úÖ Data Functionality Tests Complete');
    }

    /**
     * „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉÜ„Çπ„Éà
     */
    async testPerformance() {
        console.log('‚ö° Testing Performance...');
        
        // DOMË¶ÅÁ¥†Êï∞„ÉÅ„Çß„ÉÉ„ÇØ
        const totalElements = document.querySelectorAll('*').length;
        const reasonableElementCount = totalElements < 1000;
        this.addTestResult('Performance', 'DOM element count', reasonableElementCount);

        // „É°„É¢„É™‰ΩøÁî®Èáè„ÉÅ„Çß„ÉÉ„ÇØÔºàÊ¶ÇÁÆóÔºâ
        if (performance.memory) {
            const memoryUsage = performance.memory.usedJSHeapSize;
            const reasonableMemoryUsage = memoryUsage < 50000000; // 50MB‰ª•‰∏ã
            this.addTestResult('Performance', 'memory usage', reasonableMemoryUsage);
        }

        // „Çπ„ÇØ„É™„Éó„Éà„É≠„Éº„ÉâÊôÇÈñì„ÉÅ„Çß„ÉÉ„ÇØ
        if (performance.timing) {
            const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
            const reasonableLoadTime = loadTime < 3000; // 3Áßí‰ª•‰∏ã
            this.addTestResult('Performance', 'load time', reasonableLoadTime);
        }

        console.log('‚úÖ Performance Tests Complete');
    }

    /**
     * „ÉÜ„Çπ„ÉàÁµêÊûú„ÇíËøΩÂä†
     */
    addTestResult(category, test, passed) {
        this.testResults.push({
            category,
            test,
            passed,
            timestamp: new Date().toISOString()
        });

        const status = passed ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${category}: ${test} - ${passed ? 'PASS' : 'FAIL'}`);
    }

    /**
     * „ÉÜ„Çπ„Éà„É¨„Éù„Éº„Éà„ÇíÁîüÊàê
     */
    generateReport() {
        const endTime = Date.now();
        const duration = endTime - this.startTime;
        
        const totalTests = this.testResults.length;
        const passedTests = this.testResults.filter(r => r.passed).length;
        const failedTests = totalTests - passedTests;
        const successRate = Math.round((passedTests / totalTests) * 100);

        console.log('\nüìä AI Refactor Regression Test Report');
        console.log('='.repeat(50));
        console.log(`‚è±Ô∏è  Duration: ${duration}ms`);
        console.log(`üìù Total Tests: ${totalTests}`);
        console.log(`‚úÖ Passed: ${passedTests}`);
        console.log(`‚ùå Failed: ${failedTests}`);
        console.log(`üìà Success Rate: ${successRate}%`);
        console.log(`üö® Errors: ${this.errors.length}`);

        if (this.errors.length > 0) {
            console.log('\nüö® Error Details:');
            this.errors.forEach((error, index) => {
                console.log(`${index + 1}. ${error}`);
            });
        }

        // „Ç´„ÉÜ„Ç¥„É™„ÉºÂà•Áµ±Ë®à
        const categories = [...new Set(this.testResults.map(r => r.category))];
        console.log('\nüìä Results by Category:');
        categories.forEach(category => {
            const categoryTests = this.testResults.filter(r => r.category === category);
            const categoryPassed = categoryTests.filter(r => r.passed).length;
            const categoryRate = Math.round((categoryPassed / categoryTests.length) * 100);
            console.log(`  ${category}: ${categoryPassed}/${categoryTests.length} (${categoryRate}%)`);
        });

        // ÁµêÊûúÂà§ÂÆö
        const testPassed = failedTests === 0 && this.errors.length === 0;
        console.log(`\nüéØ Overall Result: ${testPassed ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
        
        if (!testPassed) {
            console.log('‚ö†Ô∏è  „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞„Çí‰∏≠Ê≠¢„Åó„ÄÅÂÖÉ„ÅÆ„Ç≥„Éº„Éâ„Å´Êàª„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        }

        return {
            passed: testPassed,
            totalTests,
            passedTests,
            failedTests,
            successRate,
            errors: this.errors,
            duration
        };
    }
}

// „Ç∞„É≠„Éº„Éê„É´„Å´ÂÖ¨Èñã
window.AIRefactorRegressionTest = AIRefactorRegressionTest;

// ÂÆüË°åÈñ¢Êï∞
window.runAIRefactorTest = async function() {
    const tester = new AIRefactorRegressionTest();
    return await tester.runFullSuite();
};